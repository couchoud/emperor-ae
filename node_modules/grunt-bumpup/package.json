{
  "name": "grunt-bumpup",
  "description": "Update the version, date, and other properties in JSON files while preserving the original indentation style.",
  "version": "0.5.2",
  "keywords": [
    "gruntplugin",
    "bump",
    "semver",
    "version"
  ],
  "homepage": "https://github.com/darsain/grunt-bumpup",
  "author": {
    "name": "Darsain",
    "url": "http://darsa.in"
  },
  "contributors": [
    {
      "name": "leny",
      "url": "http://leny.me"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/darsain/grunt-bumpup.git"
  },
  "bugs": {
    "url": "https://github.com/darsain/grunt-bumpup/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "moment": "~2.2.1",
    "semver": "~2.1.0"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.4",
    "grunt": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "readme": "# grunt-bumpup [![NPM version](https://badge.fury.io/js/grunt-bumpup.png)](https://npmjs.org/package/grunt-bumpup)\n\nUpdates the `version`, `date`, and other properties in your JSON files.\n\nThe properties are updated only when already present in the original JSON file. Plugin also detects and preserves the\noriginal indentation style.\n\n> **Note:** if you want to create tag, commit, or push to a git repository in addition to bumping version, please consider [grunt-bump](https://npmjs.org/package/grunt-bump).\n\nThis is a [Grunt](http://gruntjs.com/) 0.4 plugin. If you haven't used [Grunt](http://gruntjs.com/) before, be sure to\ncheck out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a\n[Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins.\n\n### [Changelog](https://github.com/darsain/grunt-bumpup/wiki/Changelog)\n\nUpholds the [Semantic Versioning Specification](http://semver.org/).\n\n## Installation\n\nUse npm to install and save the plugin into `devDependencies`.\n\n```shell\nnpm install grunt-bumpup --save-dev\n```\n\nOnce the plugin has been installed, it can be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-bumpup');\n```\n\n## Usage\n\n```js\ngrunt bumpup\n```\n\nBy default, the *patch* version is bumped.\n\nYou can specify a different release type bump in 1st argument:\n\n```js\ngrunt bumpup:[type]\n```\n\nAnd the build meta suffix in 2nd argument:\n\n```js\ngrunt bumpup:[type]:[buildmeta]\n```\n\nAvailable release types are:\n\n- **major**: Will bump the major `x.0.0` part of a version string.\n- **minor**: Will bump the minor `0.x.0` part of a version string.\n- **patch**: Will bump the patch `0.0.x` part of a version string.\n- **prerelease**: Will bump the prerelease `0.0.0-x` part of a version string.\n- **build**: Tells bumpup that you are changing only the buildmeta suffix and nothing else should be modified.\n\nFull possible version format: `major.minor.patch-prerelease+buildmeta`\n\nThe prerelease part is appended only in **prerelease** bump type, and removed when present in **major**, **minor**, or **patch** bumps.\n\nThe `buildmeta` suffix has to be passed manually:\n\n```shell\ngrunt bumpup:[type]:1458\n```\n\nYou can also ignore everything above and pass a valid semantic version directly:\n\n```\ngrunt bumpup:1.1.0-2+1458\n```\n\n## Configuration\n\nIn your project's Gruntfile, add a section named `bumpup` to the data object passed into `grunt.initConfig()`. This is a\nsimple task, and does not conform to multi task options & files input types! All available configuration styles are\ndescribed below.\n\nThis is the most verbose form of the configuration:\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\toptions: {\n\t\t\t// Options go here.\n\t\t},\n\t\tsetters: {\n\t\t\t// Custom setters go here.\n\t\t},\n\t\tfiles: [\n\t\t\t// JSON files go here.\n\t\t],\n\t},\n});\n```\n\n### Configuration examples:\n\nDefault options and one JSON file:\n\n```js\ngrunt.initConfig({\n\tbumpup: 'package.json'\n});\n```\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\tfile: 'package.json'\n\t}\n});\n```\n\nDefault options, and multiple JSON files:\n\n```js\ngrunt.initConfig({\n\tbumpup: ['package.json', 'component.json']\n});\n```\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\tfiles: ['package.json', 'component.json']\n\t}\n});\n```\n\nCustom options and setters:\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\toptions: {\n\t\t\tdateformat: 'YYYY-MM-DD HH:mm',\n\t\t\tnormalize: false\n\t\t},\n\t\tsetters: {\n\t\t\t// Overrides version setter\n\t\t\tversion: function (old, releaseType, options) {\n\t\t\t\treturn 'proprietary version';\n\t\t\t},\n\t\t\t// Adds a new setter for `timestamp` property\n\t\t\ttimestamp: function (old, releaseType, options) {\n\t\t\t\treturn +new Date();\n\t\t\t},\n\t\t},\n\t\tfiles: ['package.json', 'component.json']\n\t}\n});\n```\n\n## Options\n\n#### options.updateProps\nType: `Object`\nDefault: `{}`\n\nMap of grunt config property names that should be updated after bumping.\n\nUsage: If you have a `pkg` convenience property from `package.json`, and you bump up something inside it, you need to\ntell that to grunt so the next tasks in queue can use the updated data.\n\nExample: Tell bumpup to update the `pkg` config property when bumping the `package.json` file.\n\n```js\ngrunt.initConfig({\n\tpkg: grunt.file.readJSON('package.json'),\n\tbumpup: {\n\t\toptions: {\n\t\t\tupdateProps: {\n\t\t\t\tpkg: 'package.json'\n\t\t\t}\n\t\t},\n\t\tfile: 'package.json'\n\t}\n});\n```\n\n#### options.normalize\nType: `Boolean`\nDefault: `true`\n\nWhether to normalize all JSON files to have the same version. The version that is than bumped up and saved into all\nfiles is taken from the first file passed into the files array.\n\n#### options.dateformat\nType: `String`\nDefault: `YYYY-MM-DD HH:mm:ss Z`\n\nA date format string used by [moment.js'](http://momentjs.com) `.format()` method, which is in turn used in `date`\nproperty setter. To see all available format tokens, read the\n[moment.js' format documentation](http://momentjs.com/docs/#/displaying/format/).\n\nFollowing is the list of valid moment.js ISO-8601 (computer and human readable) date formats.\n\n```\nYYYY-MM-DD\nYYYY-MM-DDTHH\nYYYY-MM-DD HH\nYYYY-MM-DDTHH:mm\nYYYY-MM-DD HH:mm\nYYYY-MM-DDTHH:mm:ss\nYYYY-MM-DD HH:mm:ss\nYYYY-MM-DDTHH:mm:ss.SSS\nYYYY-MM-DD HH:mm:ss.SSS\nYYYY-MM-DDTHH:mm:ss Z\nYYYY-MM-DD HH:mm:ss Z\n```\n\nThe dates are set in the UTC timezone, so including the Z token is recommended.\n\n## Custom setters\n\nYou can define your own property setters by passing them as functions into `setters` object. For example, this will\nupdate the `timestamp` property inside `package.json`:\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\tsetters: {\n\t\t\ttimestamp: function (oldTimestamp, releaseType, options, buildMeta) {\n\t\t\t\treturn +new Date();\n\t\t\t}\n\t\t},\n\t\tfile: 'package.json'\n\t}\n});\n```\n\nYou can also override the default setters for `version` and `date` properties if you want some more control, or\nother than default behavior.\n\n### Setter arguments\n\nAll setters receive the same 4 arguments:\n\n- *1st* **old** Old property value.\n- *2nd* **releaseType** Release type. Can be `major`, `minor`, `patch`, `prerelease`, or a valid semantic version.\n- *3rd* **options** Options object, extended with default values.\n- *4th* **buildMeta** Build meta suffix (when passed in 2nd task argument).\n\nExample showcasing simplified `version` & `date` setters:\n\n```js\ngrunt.initConfig({\n\tbumpup: {\n\t\tsetters: {\n\t\t\tversion: function (oldVersion, releaseType, options, buildMeta) {\n\t\t\t\treturn semver.inc(oldVersion, releaseType) + '+' + buildMeta;\n\t\t\t},\n\t\t\tdate: function (oldDate, releaseType, options, buildMeta) {\n\t\t\t\treturn moment.utc().format(options.dateformat);\n\t\t\t}\n\t\t},\n\t\tfile: 'package.json'\n\t}\n});\n```\n\n### Return values\n\nEach setter has to return the new property value, or when something went wrong, `grunt.fail.warn()` an error and return\n`undefined`.\n\n## Usage Examples\n\n#### Release task\n\nExample \"release\" task alias that handles everything needed to build a new project release:\n\n```js\n// Task configurations\ngrunt.initConfig({\n\tpkg: grunt.file.readJSON('package.json'),\n\tjshint: ...,\n\tuglify: ...,\n\tbumpup: {\n\t\toptions: {\n\t\t\tupdateProps: {\n\t\t\t\tpkg: 'package.json'\n\t\t\t}\n\t\t},\n\t\tfile: 'package.json'\n\t},\n\ttagrelease: '<%= pkg.version %>'\n});\n\n// Loading the plugins\ngrunt.loadNpmTasks('grunt-contrib-jshint');\ngrunt.loadNpmTasks('grunt-contrib-uglify');\ngrunt.loadNpmTasks('grunt-bumpup');\ngrunt.loadNpmTasks('grunt-tagrelease');\n\n// Alias task for release\ngrunt.registerTask('release', function (type) {\n\ttype = type ? type : 'patch';     // Default release type\n\tgrunt.task.run('jshint');         // Lint stuff\n\tgrunt.task.run('bumpup:' + type); // Bump up the version\n\tgrunt.task.run('uglify');         // Minify stuff\n\tgrunt.task.run('tagrelease');     // Commit & tag the release\n});\n\n// Alias task for release with buildmeta suffix support\ngrunt.registerTask('release', function (type, build) {\n\tvar bumpParts = ['bumpup'];\n\tif (type) { bumpParts.push(type); }\n\tif (build) { bumpParts.push(build); }\n\tgrunt.task.run('jshint');\n\tgrunt.task.run(bumpParts.join(':'));\n\tgrunt.task.run('uglify');\n\tgrunt.task.run('tagrelease');\n});\n```\n\nAnd now you can call it from CLI like this:\n\n```shell\ngrunt release            // Default patch release\ngrunt release:minor      // Minor release\ngrunt release:minor:1458 // Minor release with buildtype suffix\ngrunt release:build:1459 // Only build suffix will be modified\n```\n",
  "readmeFilename": "README.md",
  "_id": "grunt-bumpup@0.5.2",
  "_from": "grunt-bumpup@~0.5.2"
}
